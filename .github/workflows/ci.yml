name: ci
on:
  push:
  pull_request:
    types: [opened, reopened]
env:
  PRODUCTION_BRANCH: refs/heads/main
  STAGING_BRANCH: refs/heads/edge
  EB_APP_PRODUCTION: go-testing
  EB_ENV_PRODUCTION: go-testing-env
  EB_APP_STAGING: my-app-stag
  EB_ENV_STAGING: my-app-staging
  ECR_URL: 171502298914.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO: gogov
  SENTRY_URL: https://sentry.io/
  SENTRY_ORG: gogovsg
  SENTRY_PROJECT_PRODUCTION: gogovsg-prod
  SENTRY_PROJECT_STAGING: gogovsg-staging
  SENTRY_DNS_PRODUCTION: https://a76d61749b824d8fa8ad84eee7ecc882@o372043.ingest.sentry.io/5193500
  SENTRY_DNS_STAGING: https://5adc575a35d8443fb6ae6c83cee91a07@o372043.ingest.sentry.io/5185989
jobs:
  ci:
    name: CI
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'
      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-
      - run: npm ci --legacy-peer-deps
      - run: npm run lint
      - run: npx lockfile-lint --type npm --path package-lock.json --validate-https --allowed-hosts npm
      - run: npm run build
        env:
          ASSET_VARIANT: gov
  build-gogov:
    name: Build and push for gogov
    runs-on: ubuntu-22.04
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
      tag: ${{steps.extract_tag.outputs.tag}}
    steps:
      - uses: actions/checkout@v2
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Extract ECR tag
        shell: bash
        run: echo "##[set-output name=tag;]$(echo ghactions-${BRANCH}-${SHA})"
        id: extract_tag
        env:
          BRANCH: ${{ steps.extract_branch.outputs.branch }}
          SHA: ${{ github.sha }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login_ecr
        uses: aws-actions/amazon-ecr-login@v1
      - run: |
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo SERVERLESS_STAGE=staging >> $GITHUB_ENV;
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo SERVERLESS_STAGE=production >> $GITHUB_ENV;
          fi
      - name: Build, tag, and push image to Amazon ECR
        env:
          REPO: ${{ env.ECR_URL }}/${{ env.ECR_REPO }}
          TAG: ${{ steps.extract_tag.outputs.tag }}
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 171502298914.dkr.ecr.us-east-1.amazonaws.com
          docker build --tag my-image --build-arg __ASSET_VARIANT=gov --build-arg __DD_SERVICE=go-gov --build-arg __DD_ENV=${SERVERLESS_STAGE} .
          docker tag my-image ${REPO}:${TAG}
          docker push ${REPO}:${TAG}
  deploy-gogov:
    name: Deploy to Elastic Beanstalk and AWS Lambda for gogov
    runs-on: ubuntu-22.04
    needs: [ci, build-gogov]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'
      - run: |
          echo SERVERLESS_SERVICE=gogovsg >> $GITHUB_ENV;
          if [[ $GITHUB_REF == $STAGING_BRANCH ]]; then
            echo BRANCH_ENV=staging >> $GITHUB_ENV;
          elif [[ $GITHUB_REF == $PRODUCTION_BRANCH ]]; then
            echo BRANCH_ENV=production >> $GITHUB_ENV;
          fi
      - name: Package Dockerrun.aws.json
        run: |
          sed -i -e "s|@REPO|$REPO|g" Dockerrun.aws.json
          sed -i -e "s|@TAG|$TAG|g" Dockerrun.aws.json
          sed -i -e "s|@DD_API_KEY|$DD_API_KEY|g" -e "s|@DD_SERVICE|$DD_SERVICE|g" -e "s|@DD_ENV|$DD_ENV|g" .ebextensions/99datadog.config
          zip -r "deploy.zip" .ebextensions Dockerrun.aws.json
        env:
          REPO: ${{env.ECR_URL}}/${{env.ECR_REPO}}
          TAG: ${{ needs.build-gogov.outputs.tag }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_ENV: ${{ env.BRANCH_ENV }}
          DD_SERVICE: go-gov
      - name: Get timestamp
        shell: bash
        run: echo "##[set-output name=timestamp;]$(env TZ=Asia/Singapore date '+%Y%m%d%H%M%S')"
        id: get_timestamp
      - name: Get Elastic Beanstalk label
        shell: bash
        run: echo "##[set-output name=label;]$(echo ${TAG}-${TIMESTAMP})"
        id: get_label
        env:
          TAG: ${{ needs.build-gogov.outputs.tag }}
          TIMESTAMP: ${{ steps.get_timestamp.outputs.timestamp }}
      - name: Select Elastic Beanstalk variables
        shell: python
        run: |
          import os
          branch = os.environ['GITHUB_REF']
          staging = os.environ['STAGING_BRANCH']
          production = os.environ['PRODUCTION_BRANCH']
          eb_app_staging = os.environ['EB_APP_STAGING']
          eb_env_staging = os.environ['EB_ENV_STAGING']
          eb_app_production = os.environ['EB_APP_PRODUCTION']
          eb_env_production = os.environ['EB_ENV_PRODUCTION']
          if branch == staging:
            print('::set-output name=eb_app::' + eb_app_staging)
            print('::set-output name=eb_env::' + eb_env_staging)
          elif branch == production:
            print('::set-output name=eb_app::' + eb_app_production)
            print('::set-output name=eb_env::' + eb_env_production)
        id: select_eb_vars
      - name: Deploy to EB
        uses: opengovsg/beanstalk-deploy@v11
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ steps.select_eb_vars.outputs.eb_app }}
          environment_name: ${{ steps.select_eb_vars.outputs.eb_env }}
          version_label: ${{ steps.get_label.outputs.label }}
          region: us-east-1
          deployment_package: deploy.zip
          wait_for_deployment: false
          wait_for_environment_recovery: false
      - name: serverless deploy
        uses: opengovsg/serverless-github-action@v3.0.0
        with:
          args: -c "serverless plugin install --name serverless-plugin-include-dependencies && serverless deploy --stage=$BRANCH_ENV --conceal --verbose"
          entrypoint: /bin/bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SERVERLESS_SERVICE: ${{ env.SERVERLESS_SERVICE }}